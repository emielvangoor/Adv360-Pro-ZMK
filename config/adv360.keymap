#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        cmd_cmdspace: cmd_cmdspace {
            compatible = "zmk,behavior-tap-dance";
            label = "CMD_CMDSPACE";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&kp LG(SPACE)>;
        };

        pp_or_next_song: pp_or_next_song {
            compatible = "zmk,behavior-tap-dance";
            label = "PP_OR_NEXT_SONG";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        colons: colons {
            compatible = "zmk,behavior-tap-dance";
            label = "COLONS";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp COLON>;
        };

        spaceshift: spaceshift {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACESHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <75>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <70>;
        };

        hml_mod_3: hml_mod_3 {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_MOD_3";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <40 41 42 43>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <40 41 42 43 37 53 68 70 69 38 21 22 25 7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75>;
        };

        hmr_mod: hmr_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_MOD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <29 30 31 32 33>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
        };

        hml_mouse: hml_mouse {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_MOUSE";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_is_ctrl_s {
            bindings = <&kp LC(S)>;
            key-positions = <41 42>;
        };

        df_to_ctrl_shift_f {
            bindings = <&kp LC(M)>;
            key-positions = <31 32>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1  &kp N2     &kp N3     &kp N4          &kp N5  &kp C_VOL_UP                                                              &mo 0             &kp N6  &kp N7            &kp N8               &kp N9      &kp N0         &kp MINUS
&kp TAB    &kp Q   &kp W      &kp E      &kp R           &kp T   &kp C_VOLUME_DOWN                                                         &pp_or_next_song  &kp Y   &kp U             &kp I                &kp O       &kp P          &kp BSLH
&kp ESC    &kp A   &kp S      &kp D      &hml_mod_3 1 F  &kp G   &none              &kp LEFT_ALT   &kp RIGHT         &kp LEFT   &kp RIGHT  &kp GRAVE         &kp H   &kp J             &kp K                &kp L       &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z   &kp X      &kp C      &kp V           &kp B                                     &none             &none                                   &kp N   &hmr LCTRL M      &hmr LEFT_ALT COMMA  &kp PERIOD  &kp FSLH       &kp RSHFT
&kp LCTRL  &none   &kp LS(H)  &mkp RCLK  &mkp LCLK               &kp BSPC           &cmd_cmdspace  &kp LEFT_ALT      &kp LC(B)  &kp ENTER  &kp SPACE                 &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp COLON   &none          &mo 0
            >;
        };

        Arrows {
            bindings = <
&trans      &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans    &trans        &trans     &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans    &trans        &trans     &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&kp LSHIFT  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans    &trans    &trans        &trans     &trans  &trans
&trans      &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans            &trans    &trans        &trans     &trans  &trans
            >;
        };

        aerospace {
            bindings = <
&trans  &trans            &trans            &trans            &trans            &trans      &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans            &trans      &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp LA(NUMBER_4)  &kp LA(N5)  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans            &trans                      &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans                        &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
